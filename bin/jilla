#!/usr/bin/env node

var fs = require('fs');
var readline = require('readline');
var request = require('superagent');
var span = require('span');
var JSONStore = require('json-store');
var askFor = require('ask-for');

var cfg, db;

load(function(_cfg, _db) {
  cfg = _cfg;
  db = _db;
  var cmd = process.argv[2];
  if (cmd == 'ls')      return ls();
  if (cmd == 'start')   return start(process.argv[3]);
  if (cmd == 'stop')    return stop(process.argv[3], process.argv[4] == '--log');
  if (cmd == 'log')     return log(process.argv[3], process.argv.splice(4).join(''));
  if (cmd == 'running') return running();
  if (cmd == 'resolve') return resolve(process.argv[3]);
  if (cmd == 'reopen')  return reopen(process.argv[3]);
  if (cmd == 'close')   return close(process.argv[3]);
  if (cmd == 'search')  return search(process.argv.splice(3).join(' '));
  usage();
});

function ls() {
  request
    .get(cfg.url+'rest/api/2/search?jql=assignee='+cfg.user+'+AND+status+in+(Open,"In+Progress",Reopened)+order+by+due+ASC,+priority+DESC')
    .set('Content-Type', 'application/json')
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      var issues = res.body.issues;
      var table = [];
      for (var i=0; i<issues.length; i++) {
        table.push([
          issues[i].key,
          '<'+issues[i].fields.reporter.name+'>',
          {data: formatPrio(issues[i].fields.priority.name), right: true},
          issues[i].fields.summary
        ]);
      }
      console.log(formatTable(table));
    })
  ;
}

function start(issue) {
  transition(issue, 4, function() {
    db.set(issue, Date.now());
  });
}

function stop(issue, logAlso) {
  transition(issue, 301, function() {
    // This can only happen when the Issue was started outside jilla
    if (!db.get(issue)) {
      if (logAlso) return console.error('Automatic logging only works for issues started from jilla');
      return;
    }
    // TODO: less exact time display
    var duration = Date.now() - db.get(issue);
    if (duration < 60000) duration = 60000;
    duration = span(duration);
    console.log('Time spent: '+duration);
    db.del(issue);
    if (logAlso) log(issue, duration);
  });
}

function log(issue, time) {
  time = Math.floor(span(time)/1000);
  if (time < 60) time = 60;
  request
    .post(cfg.url+'rest/api/2/issue/'+issue+'/worklog')
    .send({timeSpentSeconds: time})
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
    })
  ;
}

function running() {
  var issues = db.get();
  if (JSON.stringify(issues) == '{}') return;
  var table = [];
  for (var issue in issues) {
    var duration = Date.now()-issues[issue];
    if (duration < 60000) duration = 60000;
    table.push([
      issue,
      span(duration)
    ]);
  }
  console.log(formatTable(table));
}

function resolve(issue) { transition(issue, 5);   }
function reopen(issue)  { transition(issue, 3);   }
function close(issue)   { transition(issue, 701); }

function search(term) {
  request
    .get(cfg.url+'rest/api/2/search?jql=summary+~+"'+term+'"+OR+description+~+"'+term+'"+OR+comment+~+"'+term+'"+order+by+due+ASC,+priority+DESC')
    .set('Content-Type', 'application/json')
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      var issues = res.body.issues;
      var table = [];
      for (var i=0; i<issues.length; i++) {
        table.push([
          issues[i].key,
          '<'+issues[i].fields.reporter.name+'>',
          {data: formatPrio(issues[i].fields.priority.name), right: true},
          issues[i].fields.summary
        ]);
      }
      console.log(formatTable(table));
    })
  ;
}

function usage() {
  console.log('usage: jilla <command> [<args>]');
  console.log('');
  console.log('Commands:');
  console.log('   ls                    List open issues');
  console.log('   start   <id>          Start working on an issue');
  console.log('   stop    <id> (--log)  Stop working on an issue (and log time)');
  console.log('   log     <id> <time>   Log work');
  console.log('   running               List issues in progress');
  console.log('   resolve <id>          Resolve issue');
  console.log('   reopen  <id>          Reopen issue');
  console.log('   close   <id>          Close issue');
  console.log('   search  <term>        Find issues');
  console.log('');
}

function transition(issue, id, cb) {
  request
    .post(cfg.url+'rest/api/2/issue/'+issue+'/transitions')
    .send({transition: {id: id}})
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      if (cb) cb();
    })
  ;
}

function formatTable(cols) {
  var rowLengths = [];
  var output = '';

  for (var i=0; i<cols.length; i++) {
    for (var j=0; j<cols[i].length; j++) {
      if (!rowLengths[j]) rowLengths[j] = 0;
      if (typeof cols[i][j] != 'object') cols[i][j] = {data:cols[i][j]};
      if (cols[i][j].data.length > rowLengths[j]) {
        rowLengths[j] = cols[i][j].data.length;
      }
    }
  }

  for (var i=0; i<cols.length; i++) {
    var col = '';
    for (var j=0; j<cols[i].length; j++) {
      if (j == cols[i].length-1) {
        col += cols[i][j].data;
        continue;
      }
      col += pad(
        cols[i][j].data,
        rowLengths[j],
        {right: cols[i][j].right}
      ) + ' ';
    }
    output += truncate(col, 79);
    if (i < cols.length-1) output += '\n';
  }

  return output;

  function pad(str, len, cfg) {
    cfg = cfg || {};
    cfg.character = cfg.character || ' ';
    if (cfg.right) {
      while(str.length < len) str = cfg.character + str;
    } else {
      while(str.length < len) str += cfg.character;
    }
    return str;
  }

  function truncate(str, len) {
    if (str.length <= len) return str;
    while (str.length > len-3) str = str.slice(0, -1);
    str = pad(str, len, {character:'.'});
    return str;
  }
}

function formatPrio(name) {
  if (name == 'Trivial')  return '';
  if (name == 'Minor')    return '!';
  if (name == 'Major')    return '!!';
  if (name == 'Critical') return '!!!';
  if (name == 'Blocker')  return '!!!!';
  return name;
}

function load(cb) {
  var home = (process.platform == 'win32') ? 'USERPROFILE' : 'HOME';
  var jillaPath = process.env[home]+'/.jilla/';
  var cfgPath = jillaPath+'cfg.json';
  var dbPath = jillaPath+'db.json';

  if (fs.existsSync(cfgPath) && fs.existsSync(dbPath)) {
    cb(require(cfgPath), JSONStore(dbPath));
  } else {
    if (!fs.existsSync(jillaPath)) fs.mkdirSync(jillaPath);
    askFor(['Jira Url', 'Username', 'Password'], function(answers) {
      console.log('Good to go!');
      cfg = {
        url     : answers['Jira Url'],
        user    : answers['Username'],
        password: answers['Password']
      };
      if (cfg.url[cfg.url.length-1] != '/') cfg.url += '/';
      // TODO: Store password securely
      fs.writeFileSync(cfgPath, JSON.stringify(cfg));
      cb(cfg, JSONStore(dbPath));
    });
  }
}